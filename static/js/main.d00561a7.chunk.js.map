{"version":3,"sources":["components/App.js","index.js"],"names":["DisplayQuestion","props","console","log","question","options","map","option","Fragment","style","display","position","type","name","value","ShowFeedBack","username","score","App","enterQuiz","document","getElementById","setState","currentState","questionIndex","resetQuiz","submitQuestion","checked","querySelector","increment","state","quizData","answer","textAlign","this","color","placeholder","id","onClick","length","React","Component","ReactDOM","render","StrictMode"],"mappings":"2KAGMA,EAAkB,SAACC,GAEvB,OADAC,QAAQC,IAAIF,EAAMG,SAASC,SAEzB,gCACE,6BAAKJ,EAAMG,SAASA,WAEjBH,EAAMG,SAASC,QAAQC,KAAI,SAACC,GAAD,OAC1B,eAAC,IAAMC,SAAP,WAAgB,wBAAOC,MAAO,CAACC,QAAQ,QAASC,SAAU,YAA1C,UAChB,uBAAOC,KAAM,QAAQC,KAAK,SAASC,MAAOP,IAAiBA,KAC3D,6BAGF,2BAMFQ,EAAe,SAACd,GACpB,OACE,8BACE,qCAAQA,EAAMe,SAAd,mBAAwCf,EAAMgB,YAqHrCC,E,kDA/Gb,WAAYjB,GAAQ,IAAD,8BACjB,cAAMA,IA8BRkB,UAAY,WACV,IAAIH,EAAWI,SAASC,eAAe,SAASP,MAChDZ,QAAQC,IAAIa,GACI,KAAbA,GAGD,EAAKM,UAAS,SAACC,GACb,MAAO,CACLP,WACAQ,cAAgB,OAxCL,EA8CnBC,UAAY,WACV,EAAKH,UAAS,SAACC,GACb,MAAO,CACLP,SAAW,GACXQ,eAAiB,EACjBP,MAAQ,OAnDK,EAwDnBS,eAAiB,WACf,IAAIC,EAAUP,SAASQ,cAAc,gCAErC,GADA1B,QAAQC,IAAIwB,GACRA,EAAS,CACXA,EAAQA,SAAU,EAClB,IAAIE,EAAY,EACZ,EAAKC,MAAMC,SAAS,EAAKD,MAAMN,eAAeQ,SAAWL,EAAQb,QACnEe,EAAY,GAGd,EAAKP,UAAS,SAACC,GACb,MAAO,CACLN,MAAQM,EAAaN,MAAMY,EAC3BL,cAAgBD,EAAaC,cAAc,QAnEjD,EAAKM,MAAQ,CACXd,SAAW,GACXe,SAAW,CACT,CACI,SAAY,qCACZ,QAAY,CAAC,eAAgB,YAAa,YAC1C,OAAW,aAEf,CACI,SAAY,qCACZ,QAAW,CAAC,UAAW,UAAW,WAClC,OAAW,WAEf,CACI,SAAY,qCACZ,QAAY,CAAC,UAAW,YAAa,UACrC,OAAW,aAEf,CACI,SAAY,kCACZ,QAAY,CAAC,qBAAsB,WAAY,SAC/C,OAAW,uBAGjBP,eAAiB,EACjBP,MAAQ,GA3BO,E,qDAuFjB,OACE,qBAAKR,MAAO,CAACwB,UAAU,SAAUvB,QAAQ,SAAzC,SAC2B,KAAxBwB,KAAKJ,MAAMd,SACZ,gCACE,oBAAIP,MAAO,CAAC0B,MAAM,SAAlB,6BACF,uBAAOvB,KAAO,OAAOwB,YAAc,kBAAkBC,GAAK,UAC1D,uBAAOzB,KAAO,SAAS0B,QAAWJ,KAAKf,UAAWL,MAAM,iBAEpDoB,KAAKJ,MAAMN,gBAAmBU,KAAKJ,MAAMC,SAASQ,OACrD,eAAC,IAAM/B,SAAP,WACA,cAAC,EAAD,CAAiBJ,SAAY8B,KAAKJ,MAAMC,SAASG,KAAKJ,MAAMN,iBAC5D,uBAAOZ,KAAO,SAAS0B,QAASJ,KAAKR,eAAgBZ,MAAOoB,KAAKJ,MAAMN,gBAAkBU,KAAKJ,MAAMC,SAASQ,OAAO,EAAI,OAAS,cAEjI,eAAC,IAAM/B,SAAP,WACC,cAAC,EAAD,CAAcQ,SAAUkB,KAAKJ,MAAMd,SAAUC,MAAOiB,KAAKJ,MAAMb,QAC/D,uBAAOL,KAAO,SAAS0B,QAAWJ,KAAKT,UAAWX,MAAM,6B,GAvGhD0B,IAAMC,WCxBxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxB,SAASC,eAAe,W","file":"static/js/main.d00561a7.chunk.js","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\n\nconst DisplayQuestion = (props) => {\n  console.log(props.question.options)\n  return (\n    <div>\n      <h1>{props.question.question}</h1>\n      \n        {props.question.options.map((option)=>(\n          <React.Fragment><label style={{display:\"block\", position: \"relative\"}}>\n          <input type =\"radio\" name=\"option\" value={option}></input>{option}</label>\n          <br/></React.Fragment>\n        )\n        )}\n        <br/>\n      \n    </div>\n  )\n}\n\nconst ShowFeedBack = (props) => {\n  return (\n    <div>\n      <h2>Hi {props.username} , you score is {props.score}</h2>\n    </div>\n  )\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      username : \"\",\n      quizData : [\n        {\n            \"question\": \"What is the capital of Telangana ?\",\n            \"options\" : [\"Secunderabad\", \"Hyderabad\", \"Warangal\"],\n            \"answer\" : \"Hyderabad\"\n        },\n        {\n            \"question\": \"What is the capital of TamilNadu ?\",\n            \"options\" :[\"Chennai\", \"Madurai\", \"Vellore\"],\n            \"answer\" : \"Chennai\"\n        },\n        {\n            \"question\": \"What is the capital of Karnataka ?\",\n            \"options\" : [\"Belgaum\", \"Bengaluru\", \"Mysuru\"],\n            \"answer\" : \"Bengaluru\"\n        },\n        {\n            \"question\": \"What is the capital of Kerala ?\",\n            \"options\" : [\"Thiruvananthapuram\", \"Thrissur\", \"Kochi\"],\n            \"answer\" : \"Thiruvananthapuram\"\n        }     \n      ],\n      questionIndex : -1,\n      score : 0\n    }\n  }\n\n  enterQuiz = () => {\n    let username = document.getElementById(\"uname\").value\n    console.log(username)\n    if(username === \"\") {\n\n    } else {\n      this.setState((currentState) => {\n        return {\n          username,\n          questionIndex : 0\n        }\n      })\n    }\n  }\n\n  resetQuiz = () => {\n    this.setState((currentState) => {\n      return {\n        username : \"\",\n        questionIndex : -1,\n        score : 0\n      }\n    })\n  }\n\n  submitQuestion = () => {\n    let checked = document.querySelector('input[name=\"option\"]:checked')\n    console.log(checked)\n    if (checked) {\n      checked.checked = false\n      let increment = 0\n      if (this.state.quizData[this.state.questionIndex].answer === checked.value) {\n        increment = 1\n      }\n      \n      this.setState((currentState)=>{\n        return {\n          score : currentState.score+increment,\n          questionIndex : currentState.questionIndex+1\n        }\n      })\n      \n    }\n  }\n\n  // componentDidUpdate() {\n  //   console.log(\"--Inside Component Did Update\")\n  //   console.log(this.state.questionIndex !== -1)\n  //   console.log(this.state.questionIndex !== this.state.quizData.length)\n  //   if (this.state.questionIndex !== -1 && (this.state.questionIndex !== this.state.quizData.length)) {\n  //     console.log(\"--Inside Second\")\n  //     return <DisplayQuestion question = {this.state.quizData[this.state.questionIndex]} />\n  //   }\n  // }\n\n  render() {\n    return (\n      <div style={{textAlign:\"center\", display:\"block\"}}>\n        {this.state.username === \"\" ?\n        <div> \n          <h1 style={{color:\"green\"}}>Enter Your Name</h1>\n        <input type = \"text\" placeholder = \"Enter your name\" id = \"uname\"/>\n        <input type = \"submit\" onClick = {this.enterQuiz} value=\"Take Quiz\"/>\n        </div>\n         : (this.state.questionIndex !==  this.state.quizData.length) ? \n         <React.Fragment>\n         <DisplayQuestion question = {this.state.quizData[this.state.questionIndex]} />\n         <input type = \"button\" onClick={this.submitQuestion} value={this.state.questionIndex !== this.state.quizData.length-1 ? \"Next\" : \"Submit\"} />\n         </React.Fragment> :\n         <React.Fragment>\n          <ShowFeedBack username={this.state.username} score={this.state.score} />\n          <input type = \"submit\" onClick = {this.resetQuiz} value=\"Take Quiz Again\"/>\n         </React.Fragment>\n        }\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\n// import reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}